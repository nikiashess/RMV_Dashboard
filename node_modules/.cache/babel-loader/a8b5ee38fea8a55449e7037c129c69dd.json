{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport createIconSet from './createIconSet';\nexport default function createMultiStyleIconSet(styles, optionsInput = {}) {\n  const styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  const options = {\n    defaultStyle: styleNames[0],\n    fallbackFamily: _unused => styleNames[0],\n    glyphValidator: (_unused, __unused) => true,\n    ...optionsInput\n  };\n  const iconSets = styleNames.reduce((acc, name) => {\n    const style = styles[name];\n    acc[name] = createIconSet(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce((result, propName) => styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result, options.defaultStyle);\n  }\n\n  function getIconSetForProps(props) {\n    const {\n      name\n    } = props;\n    const style = styleFromProps(props);\n    if (options.glyphValidator(name, style)) return iconSets[style];\n    const family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce((acc, prop) => {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style, name = '') {\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name ? iconSets[styleFromProps({\n      [style]: true\n    })] : getIconSetForProps({\n      name,\n      [style]: true\n    });\n  }\n\n  function getFontFamily(style = options.defaultStyle) {\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap(style = options.defaultStyle) {\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name, style = options.defaultStyle) {\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass(selectClass = '') {\n    class IconClass extends PureComponent {\n      render() {\n        const selectedIconSet = getIconSetForProps(this.props);\n        const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n        const props = reduceProps(this.props);\n        return React.createElement(SelectedIconClass, props);\n      }\n\n    }\n\n    IconClass.propTypes = styleNames.reduce((acc, name) => {\n      acc[name] = PropTypes.bool;\n      return acc;\n    }, {});\n    IconClass.defaultProps = styleNames.reduce((acc, name) => {\n      acc[name] = false;\n      return acc;\n    }, {});\n    IconClass.font = Object.values(styles).reduce((acc, style) => {\n      acc[style.fontFamily] = style.fontFile;\n      return acc;\n    }, {});\n    IconClass.StyledIconSet = getStyledIconSet;\n    IconClass.getFontFamily = getFontFamily;\n    IconClass.getRawGlyphMap = getRawGlyphMap;\n    IconClass.hasIcon = hasIcon;\n    return IconClass;\n  }\n\n  const Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  return Icon;\n}","map":{"version":3,"sources":["../src/createMultiStyleIconSet.ts"],"names":[],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport createIconSet from './createIconSet';\n\ntype FontStyle = {\n  fontFamily: string;\n  fontFile: any;\n  glyphMap: any;\n  fontStyle: any;\n};\n\ntype FontStyles = {\n  [key: string]: FontStyle;\n};\n\nexport default function createMultiStyleIconSet(\n  styles: FontStyles,\n  optionsInput = {}\n): any {\n  const styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  const options = {\n    defaultStyle: styleNames[0],\n    fallbackFamily: (_unused: any) => styleNames[0],\n    glyphValidator: (_unused: any, __unused: any) => true,\n    ...optionsInput,\n  };\n\n  const iconSets = styleNames.reduce((acc, name) => {\n    const style = styles[name];\n\n    acc[name] = createIconSet(\n      style.glyphMap || {},\n      style.fontFamily || '',\n      style.fontFile || '',\n      style.fontStyle || {}\n    );\n\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(\n      (result, propName) =>\n        styleNames.indexOf(propName) !== -1 && props[propName] === true\n          ? propName\n          : result,\n      options.defaultStyle\n    );\n  }\n\n  function getIconSetForProps(props) {\n    const { name } = props;\n    const style = styleFromProps(props);\n\n    if (options.glyphValidator(name, style)) return iconSets[style];\n\n    const family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce((acc, prop) => {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style, name = '') {\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name\n      ? iconSets[styleFromProps({ [style]: true })]\n      : getIconSetForProps({ name, [style]: true });\n  }\n\n  function getFontFamily(style = options.defaultStyle) {\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap(style = options.defaultStyle) {\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name, style = options.defaultStyle) {\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass(selectClass = '') {\n    class IconClass extends PureComponent {\n      static propTypes = styleNames.reduce((acc, name) => {\n        acc[name] = PropTypes.bool;\n        return acc;\n      }, {});\n\n      static defaultProps = styleNames.reduce((acc, name) => {\n        acc[name] = false;\n        return acc;\n      }, {});\n\n      static font = Object.values(styles).reduce((acc, style) => {\n        acc[style.fontFamily] = style.fontFile;\n        return acc;\n      }, {});\n\n      static Button: any;\n\n      static StyledIconSet = getStyledIconSet;\n      static getFontFamily = getFontFamily;\n      static getRawGlyphMap = getRawGlyphMap;\n      static hasIcon = hasIcon;\n\n      render() {\n        const selectedIconSet = getIconSetForProps(this.props);\n        const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n        const props = reduceProps(this.props);\n\n        return React.createElement(SelectedIconClass, props);\n      }\n    }\n\n    return IconClass;\n  }\n\n  const Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  return Icon;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}